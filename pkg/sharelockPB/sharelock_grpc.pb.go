// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: sharelock.proto

package sharelockPB

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShareLockService_Ping_FullMethodName   = "/sharelock.ShareLockService/Ping"
	ShareLockService_Lock_FullMethodName   = "/sharelock.ShareLockService/Lock"
	ShareLockService_Unlock_FullMethodName = "/sharelock.ShareLockService/Unlock"
)

// ShareLockServiceClient is the client API for ShareLockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShareLockServiceClient interface {
	Ping(ctx context.Context, in *ShareLockPingRequest, opts ...grpc.CallOption) (*ShareLockPingResponse, error)
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error)
	Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error)
}

type shareLockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShareLockServiceClient(cc grpc.ClientConnInterface) ShareLockServiceClient {
	return &shareLockServiceClient{cc}
}

func (c *shareLockServiceClient) Ping(ctx context.Context, in *ShareLockPingRequest, opts ...grpc.CallOption) (*ShareLockPingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShareLockPingResponse)
	err := c.cc.Invoke(ctx, ShareLockService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareLockServiceClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LockResponse)
	err := c.cc.Invoke(ctx, ShareLockService_Lock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareLockServiceClient) Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnlockResponse)
	err := c.cc.Invoke(ctx, ShareLockService_Unlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShareLockServiceServer is the server API for ShareLockService service.
// All implementations must embed UnimplementedShareLockServiceServer
// for forward compatibility.
type ShareLockServiceServer interface {
	Ping(context.Context, *ShareLockPingRequest) (*ShareLockPingResponse, error)
	Lock(context.Context, *LockRequest) (*LockResponse, error)
	Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error)
	mustEmbedUnimplementedShareLockServiceServer()
}

// UnimplementedShareLockServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShareLockServiceServer struct{}

func (UnimplementedShareLockServiceServer) Ping(context.Context, *ShareLockPingRequest) (*ShareLockPingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedShareLockServiceServer) Lock(context.Context, *LockRequest) (*LockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedShareLockServiceServer) Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (UnimplementedShareLockServiceServer) mustEmbedUnimplementedShareLockServiceServer() {}
func (UnimplementedShareLockServiceServer) testEmbeddedByValue()                          {}

// UnsafeShareLockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShareLockServiceServer will
// result in compilation errors.
type UnsafeShareLockServiceServer interface {
	mustEmbedUnimplementedShareLockServiceServer()
}

func RegisterShareLockServiceServer(s grpc.ServiceRegistrar, srv ShareLockServiceServer) {
	// If the following call panics, it indicates UnimplementedShareLockServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShareLockService_ServiceDesc, srv)
}

func _ShareLockService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareLockPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareLockServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShareLockService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareLockServiceServer).Ping(ctx, req.(*ShareLockPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShareLockService_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareLockServiceServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShareLockService_Lock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareLockServiceServer).Lock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShareLockService_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareLockServiceServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShareLockService_Unlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareLockServiceServer).Unlock(ctx, req.(*UnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShareLockService_ServiceDesc is the grpc.ServiceDesc for ShareLockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShareLockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sharelock.ShareLockService",
	HandlerType: (*ShareLockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ShareLockService_Ping_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _ShareLockService_Lock_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _ShareLockService_Unlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sharelock.proto",
}
